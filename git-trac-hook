#! /usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2012 Max Oberberger (max@oberbergers.de)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License 
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Version 1.1
#

import re
import os
import sys
from subprocess import Popen, PIPE, call
from datetime import datetime
from operator import itemgetter
from trac.ticket import Ticket
from trac.env import open_environment
from trac.ticket.notification import TicketNotifyEmail
from trac.ticket.web_ui import TicketModule
from trac.util.datefmt import utc

# config
TRAC_ENV = '/usr/local/trac/TRAC_ENV' ## replace this with the path to your trac-environment
GIT_PATH = '/usr/bin/git'
TRAC_ADMIN = '/usr/local/bin/trac-admin'
REPO_NAME = os.getcwd().split('/')[4] ## CHANGE the number. REPO_NAME = name of .git-folder
MYNAME = os.path.basename(sys.argv[0])
MAIL = '@oberbergers.de' ## CHANGE this address to your own

# Construct and compile regular expressions for finding ticket references
# in commit messages.
ticket_re = re.compile('#([0-9]+)')

if not 'PYTHON_EGG_CACHE' in os.environ:
	os.environ['PYTHON_EGG_CACHE'] = TRAC_ENV + "/.egg-cache"

def get_new_commits(ref_updates):
    """ Gets a list uf updates from git running post-receive,
    we want the list of new commits to the repo, that are part
    of the push. Even if they are in more then one ref in the push.

    Basically, we are running:
    git rev-list new1 ^old1 new2 ^old2 ^everything_else

    It returns a list of commits"""

    all_refs = set(call_git('for-each-ref', ['--format=%(refname)']).splitlines())
    commands = []
    for old, new, ref in ref_updates:
        # branch delete, skip it
        if re.match('0*$', new):
            continue

        commands += [new]
        all_refs.discard(ref)

        if not re.match('0*$', old):
            # update
            commands += ["^%s" % old]

    for ref in all_refs:
        commands += ["^%s" % ref]

    new_commits = call_git('rev-list', ['--stdin', '--reverse'], '\n'.join(commands)).splitlines()
    return new_commits

def handle_trac(commits,env):

    if not (os.path.exists(TRAC_ENV) and os.path.isdir(TRAC_ENV)):
        print "Trac path (%s) is not a directory." % TRAC_ENV
        sys.exit(1)


    if len(commits) == 0:
        return

    for z in commits:
        string = call_git('show',['--format=%s%n%b','--summary',z])
        eml = call_git('rev-list', ['-n', '1', z, '--pretty=format:%ae']).splitlines()[1]

	try:
	    string = string.decode('utf-8')
	except UnicodeDecodeError as ude: 
	    print >> sys.stderr, 'UTF-8 Encodeing Problem: %s' % ude

	    # if return is commented out, the hook will just print a
            # message that there is an error, and will not comment
	    # a trac ticket. But it will update the remote repo
            #return -1

        header = "In [%s/%s]:" % (z,REPO_NAME)
        for tkt in ticket_re.findall(string):
            try: 
                db = env.get_db_cnx()
                ticket = Ticket(env, tkt, db)
                if re.search("(close|closed|closes|fix|fixed|fixes) #[0-9]+", string, re.IGNORECASE):
                    ticket['status'] = "testing"
                    ticket['resolution'] = "testing"

                cnum = 0
                tm = TicketModule(env)
                for change in tm.grouped_changelog_entries(ticket, db):
                    if change['permanent']:
                        cnum += 1

                tracComment = header + "\n" + string 
                now = datetime.now(utc)
                ticket.save_changes(eml, tracComment, now, db, str(cnum+1))
                db.commit()

                tn = TicketNotifyEmail(env) 
                tn.notify(ticket, newticket=0, modtime=now)
            except Exception, e:
                print >>sys.stderr, 'Unexpected error while processing ticket ID %s: %s' % (tkt, e)
                return -1

def call_git(command, args, input=None):
    return Popen([GIT_PATH, command] + args, stdin=PIPE, stdout=PIPE).communicate(input)[0]

def handle_post_receive():
    env = open_environment(TRAC_ENV)
    lines = sys.stdin.readlines()
    updates = [line.split() for line in lines]
    commits = get_new_commits(updates)
    handle_trac(commits, env)

    return 0

def handle_pre_receive():
    lines = sys.stdin.readlines()
    updates = [line.split() for line in lines]
    commits = get_new_commits(updates)
    for i in commits:
	    ## if message references to a ticket it is ok
	    message = call_git('show',['--format=%s%n%b','--summary',i])
	    if not re.search("(close|closed|closes|fix|fixed|fixes|references|refs|addresses|re|see) #[0-9]+", message, re.IGNORECASE):
		    if not re.search("(#noref)",message,re.IGNORECASE):
			    print """you need to reference a trac ticket number
			        command #1
			        command #1, #2
			        command #1 & #2
			        command #1 and #2
			    You can have more than one command in a message. The following commands
			    are supported. There is more than one spelling for each command, to make
			    this as user-friendly as possible.
	
			    close, closed, closes, fix, fixed, fixes
			        The specified issue numbers are closed with the contents of this
			        commit message being added to it.
			    references, refs, addresses, re, see
			        The specified issue numbers are left in their current status, but
			        the contents of this commit message are added to their notes.
	
			    A fairly complicated example of what you can do is with a commit message
			    of:
	
			          Changed blah and foo to do this or that. Fixes #10 and #12, and refs #12.
	
			    This will close #10 and #12, and add a note to #12."""
			    return -1 

	    ## check if root wants to commit
	    name = call_git('show',['--format=%cn','--summary',i])
	    if re.search("root", name, re.IGNORECASE):
		    print "you are commiting as root - that is not allowed"
		    return -1

	    mail = call_git('show',['--format=%ce','--summary',i])
	    if not re.search(MAIL, mail):
		    print "mail adress " + mail + " is not allowed you need a mail-adress like muster" + MAIL
		    return -1
    
    return 0

def main():
	global MYNAME

	if MYNAME == "pre-receive":
		return handle_pre_receive()
	elif MYNAME == "post-receive":
		return handle_post_receive()
	else:
		return -1

if __name__ == "__main__":
	exit(main())
